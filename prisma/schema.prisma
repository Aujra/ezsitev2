// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  discordId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  license   License?
  cart      Cart?
  orders    Order[]
  rotations Rotation[]
  products  Product[]
  reviews   Review[]
}

model License {
  id          String    @id @default(cuid())
  key         String    @unique
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  timeBalance Int       @default(0)  // Time balance in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id          String   @id @default(cuid())
  cartId      String
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  type        String   // e.g., "rotation"
  name        String
  price       Float    // Total price (pricePerDay * days)
  pricePerDay Float    // Added pricePerDay field
  quantity    Int      @default(1)
  days        Int?     // Number of days for the rotation/license
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([cartId])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  status    String   @default("pending") // pending, completed, failed
  days      Int
  seconds   Int
  stripeId  String   // Removed @unique constraint
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Rotation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  data      Json     // Stores the rotation configuration
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]

  @@index([userId])
}

model Product {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  rotationId    String?
  rotation      Rotation? @relation(fields: [rotationId], references: [id])
  name          String
  description   String
  pricePerDay   Float     // Changed from price to pricePerDay
  tags          String[]
  images        String[]
  type          String    @default("rotation")
  status        String    @default("draft")
  averageRating Float     @default(0)
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([rotationId])
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating     Int
  comment    String
  authorName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}
