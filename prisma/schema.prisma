// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  discordId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  license   License?
  cart      Cart?
  orders    Order[]
  rotations Rotation[]
}

model License {
  id          String    @id @default(cuid())
  key         String    @unique
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  timeBalance Int       @default(0)  // Time balance in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  type      String   // e.g., "game-time"
  name      String
  price     Float
  quantity  Int      @default(1)
  days      Int?     // Specific to game-time items
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  status    String   @default("pending") // pending, completed, failed
  days      Int
  seconds   Int
  stripeId  String   // Removed @unique constraint
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Rotation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  data      Json     // Stores the rotation configuration
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
